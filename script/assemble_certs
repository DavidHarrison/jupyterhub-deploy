#!/usr/bin/env python

"""Reads in the TLS certificates and keys for all the Docker hosts, and saves
them to the secrets.vault.yml file.

"""

import yaml
import subprocess as sp
import os
import contextlib
from collections import OrderedDict

################################################################################

# This is the root directory of the ansible config
root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))

# This is the filename where the vault password is stored
vault_password_file = os.path.join(root, 'vault-password')

# This is the directory containing the certificates
certificates_dir = os.path.join(root, 'certificates')

# This is the directory containing the certificates for the outward facing proxy
proxy_certificates_dir = os.path.join(root, 'proxy-certs')

# This is the name of the certificate authority (not including the extension)
ca_name = "ca"

# If your certificates have different names than the hosts in your inventory
# file, then you can use this name map to rename them. The keys are the names
# in the hosts file, the keys are the base name of the certificate (e.g., if
# the certificate and key are `hub-cert.pem` and `hub-key.pem`, respectively,
# then the base name is 'hub'.
name_map = {
    "jupyterhub_host": "jupyterhub_host",
    "jupyterhub_node1": "jupyterhub_node1",
    "jupyterhub_node2": "jupyterhub_node2",
    "jupyterhub_node3": "jupyterhub_node3",
    "jupyterhub_node4": "jupyterhub_node4",
    "jupyterhub_node5": "jupyterhub_node5",
    "jupyterhub_node6": "jupyterhub_node6",
    "jupyterhub_node7": "jupyterhub_node7",
    "jupyterhub_node8": "jupyterhub_node8",
    "jupyterhub_node8": "jupyterhub_node8",
    "jupyterhub_node9": "jupyterhub_node9",
    "jupyterhub_node10": "jupyterhub_node10",
    "jupyterhub_node11": "jupyterhub_node11",
    "jupyterhub_node12": "jupyterhub_node12",
    "jupyterhub_node13": "jupyterhub_node13",
    "jupyterhub_node14": "jupyterhub_node14",
    "jupyterhub_node15": "jupyterhub_node15",
    "jupyterhub_node16": "jupyterhub_node16",
    "jupyterhub_node17": "jupyterhub_node17",
    "jupyterhub_node18": "jupyterhub_node18",
    "jupyterhub_node19": "jupyterhub_node19",
    "jupyterhub_node20": "jupyterhub_node20",
    "jupyterhub_node21": "jupyterhub_node21",
    "jupyterhub_node22": "jupyterhub_node22",
    "jupyterhub_node23": "jupyterhub_node23",
    "jupyterhub_node24": "jupyterhub_node24",
    "jupyterhub_node25": "jupyterhub_node25",
    "jupyterhub_node26": "jupyterhub_node26",
    "jupyterhub_node27": "jupyterhub_node27",
    "jupyterhub_node28": "jupyterhub_node28",
    "jupyterhub_node29": "jupyterhub_node29",
    "jupyterhub_node30": "jupyterhub_node30",
    "jupyterhub_node31": "jupyterhub_node31",
    "jupyterhub_node32": "jupyterhub_node32",
    "jupyterhub_node33": "jupyterhub_node33",
    "jupyterhub_node34": "jupyterhub_node34",
    "jupyterhub_node35": "jupyterhub_node35",
    "proxy_server": "proxy_server",
}

################################################################################

# from http://stackoverflow.com/questions/8640959/how-can-i-control-what-scalar-form-pyyaml-uses-for-my-data
class literal(str): pass

def literal_presenter(dumper, data):
    return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='|')
yaml.add_representer(literal, literal_presenter)

def ordered_dict_presenter(dumper, data):
    return dumper.represent_dict(data.items())
yaml.add_representer(OrderedDict, ordered_dict_presenter)


@contextlib.contextmanager
def vault(filename):
    if os.path.exists(filename):
        sp.call([
            "ansible-vault", "decrypt", filename,
            "--vault-password-file", vault_password_file
        ])

    yield

    sp.call([
        "ansible-vault", "encrypt", filename,
        "--vault-password-file", vault_password_file
    ])

# TODO: read inventory file instead
for host in name_map:
    filename = os.path.join("host_vars", host)
    with vault(filename):
        # read the secrets in
        if os.path.exists(filename):
            with open(filename, 'r') as fh:
                secrets = yaml.load(fh.read())
        else:
            secrets = {}

        # save the certificate authority
        with open(os.path.join(certificates_dir, '{}.pem'.format(ca_name)), "r") as fh:
            secrets["docker_ca_cert"] = literal(fh.read())

        # save the TLS certificate
        with open(os.path.join(certificates_dir, '{}-cert.pem'.format(name_map[host])), 'r') as fh:
            secrets["docker_tls_cert"] = literal(fh.read())

        # save the TLS key
        with open(os.path.join(certificates_dir, '{}-key.pem'.format(name_map[host])), 'r') as fh:
            secrets["docker_tls_key"] = literal(fh.read())


        if host == 'proxy_server':
            # set the certificate
            fh = open(os.path.join(proxy_certificates_dir, 'proxy-server.crt'), "r")
            secrets["ssl_cert"] = literal(fh.read())

            # set the key
            fh = open(os.path.join(proxy_certificates_dir, 'proxy-server.key'), 'r')
            secrets["ssl_key"] = literal(fh.read())

            secrets["ssl_cert_path"] = '/etc/ssl/certs/proxy.crt'
            secrets["ssl_key_path"] = '/etc/ssl/private/proxy.key'

        # save the secrets back out
        with open(filename, "w") as fh:
            fh.write("---\n")
            fh.write(yaml.dump(secrets, default_flow_style=False))
